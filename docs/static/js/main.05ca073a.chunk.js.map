{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WhoAreMyNeighbours","grid","x","y","neighbours","i","j","length","push","val","CountBombs","reduce","prev","curr","GridPiece","number","clicked","index1","index2","shown","isbomb","flagged","flag","touched","touchCancelled","onClick","onTouchStart","onTouchCancel","onContextMenu","e","preventDefault","className","style","backgroundColor","UseGrid","safeSpots","bombs","createGrid","gridStarter","Array","fill","map","b","a","type","Math","floor","random","safeX","safeY","piece","bombCount","useState","setGrid","clearNeighbours","visited","showers","forEach","clearSpecificNeighbours","setTimeout","slice","find","res","filter","safeSpot","EndScreen","gameState","resetGame","textAlign","position","color","fontSize","top","left","height","App","setGridPos","resetGrid","flagGridPiece","showGrid","checkWin","setGameState","buttonPressTimer","handleLongCancel","clearTimeout","handleLongPress","id","col","key","display","row","href","rel","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.05ca073a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst WhoAreMyNeighbours = (grid, x, y) => {\n  const neighbours = [];\n  for (let i = x - 1; i <= x + 1; i++) {\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (x === i && y === j) {\n        continue;\n      }\n      if (i >= grid.length || i < 0) {\n        continue;\n      }\n      if (j >= grid[i].length || j < 0) {\n        continue;\n      }\n      neighbours.push({ x: i, y: j, val: grid[i][j].val });\n    }\n  }\n  return neighbours;\n};\n\nconst CountBombs = (grid, x, y) => {\n  const n = WhoAreMyNeighbours(grid, x, y);\n  const ret = n.reduce((prev, curr) => {\n    return prev + curr.val;\n  }, 0);\n  return ret;\n};\n\nconst GridPiece = ({\n  number,\n  clicked,\n  index1,\n  index2,\n  shown,\n  isbomb,\n  flagged,\n  flag,\n  touched,\n  touchCancelled\n}) => {\n  return (\n    <div\n      onClick={() => clicked(index1, index2)}\n      onTouchStart={() => touched}\n      onTouchCancel={() => touchCancelled}\n      onContextMenu={e => {\n        e.preventDefault();\n        flag(index1, index2);\n      }}\n      className=\"gridPiece\"\n      style={{\n        backgroundColor: shown && isbomb ? \"red\" : flagged ? \"yellow\" : null\n      }}\n    >\n      {shown && !isbomb\n        ? number\n        : flagged\n        ? \"ðŸš©\"\n        : isbomb && shown\n        ? \"ðŸ’£\"\n        : null}\n    </div>\n  );\n};\n\nconst UseGrid = () => {\n  const safeSpots = [];\n  const bombs = [];\n  const createGrid = () => {\n    const gridStarter = new Array(10).fill(0).map((b, x) =>\n      new Array(15).fill(0).map((a, y) => {\n        const type = Math.floor(Math.random() * 7);\n        if (type > 0) safeSpots.push({ x, y });\n        if (type === 0) bombs.push({ x, y });\n        return {\n          flagged: false,\n          shown: false,\n          val: type === 0 ? 1 : 0\n        };\n      })\n    );\n\n    const { x: safeX, y: safeY } = safeSpots[\n      Math.floor(Math.random() * safeSpots.length)\n    ];\n\n    gridStarter[safeX][safeY].shown = true;\n    return gridStarter.map((grid, i) =>\n      grid.map((piece, j) => {\n        return { ...piece, bombCount: CountBombs(gridStarter, i, j) };\n      })\n    );\n  };\n\n  const [grid, setGrid] = useState(createGrid());\n\n  const clearSpecificNeighbours = (grid, neighbours) => {\n    if (!neighbours.length) return;\n    const { x, y } = neighbours[0];\n    grid[x][y].shown = true;\n    setGrid([...grid]);\n    setTimeout(\n      () => clearSpecificNeighbours(grid, [...neighbours.slice(1)]),\n      0.01\n    );\n  };\n\n  const clearNeighbours = (grid, x, y, visited) => {\n    const neighbours = WhoAreMyNeighbours(grid, x, y);\n    if (grid[x][y].bombCount !== 0) return;\n    const showers = [];\n    neighbours.forEach(({ x, y, val }) => {\n      if (grid[x][y].bombCount === 0 && val === 0) {\n        showers.push({ x, y });\n      }\n    });\n    clearSpecificNeighbours(grid, showers);\n    if (visited.find(res => res.x === x && res.y === y)) return;\n    visited.push({ x, y });\n    setTimeout(() => {\n      showers.forEach(({ x, y }) => {\n        clearNeighbours(grid, x, y, visited);\n      });\n    }, 0.01);\n  };\n\n  const setGridPos = (x, y) => {\n    if (grid[x][y].flagged) return;\n    if (grid[x][y].shown) return;\n    grid[x][y].shown = true;\n    clearNeighbours(grid, x, y, []);\n    setGrid([...grid]);\n  };\n\n  const flagGridPiece = (x, y) => {\n    grid[x][y].flagged = !grid[x][y].flagged;\n    setGrid([...grid]);\n  };\n\n  const showGrid = () => {\n    grid.map(grid => grid.map(piece => (piece.shown = true)));\n  };\n\n  const resetGrid = () => setGrid(createGrid());\n\n  const checkWin = () => {\n    safeSpots.filter(safeSpot => {\n      return !grid[safeSpot.x][safeSpot.y].shown;\n    });\n    return safeSpots.length === 0;\n  };\n  return [grid, setGridPos, resetGrid, flagGridPiece, showGrid, checkWin];\n};\n\nconst EndScreen = ({ gameState, resetGame }) => {\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        position: \"absolute\",\n        color: gameState === \"win\" ? \"green\" : \"pink\",\n        fontSize: \"2em\",\n        top: \"10%\",\n        left: \"25%\",\n        height: \"20%\"\n      }}\n    >\n      <h1>{gameState === \"win\" ? \"You won!\" : \"You lose.\"}</h1>\n      <button onClick={() => resetGame()}>Play Again?</button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [\n    grid,\n    setGridPos,\n    resetGrid,\n    flagGridPiece,\n    showGrid,\n    checkWin\n  ] = UseGrid();\n  const [gameState, setGameState] = useState(\"\");\n  const clicked = (x, y) => {\n    if (gameState !== \"\") return;\n    setGridPos(x, y);\n    if (grid[x][y].val === 1) {\n      setGameState(\"lose\");\n      showGrid();\n      return;\n    }\n    if (checkWin(grid)) {\n      setGameState(\"win\");\n      return;\n    }\n  };\n\n  const resetGame = () => {\n    setGameState(\"\");\n    resetGrid();\n  };\n\n  let buttonPressTimer = null;\n  const handleLongCancel = () => {\n    clearTimeout(buttonPressTimer);\n  };\n\n  const handleLongPress = (x, y) => {\n    buttonPressTimer = setTimeout(() => flagGridPiece(x, y), 1000);\n  };\n  return (\n    <div id=\"container\">\n      <div className=\"App\">\n        <h1 id=\"title\">Minesweeper made in React!</h1>\n        <p>Left click to reveal and right click to flag.</p>\n        {gameState !== \"\" ? (\n          <EndScreen gameState={gameState} resetGame={resetGame} />\n        ) : null}\n        <div className=\"grid\">\n          {grid.map((col, index1) => (\n            <div key={index1} style={{ display: \"flex\" }}>\n              {col.map((row, index2) => (\n                <GridPiece\n                  key={index2}\n                  shown={row.shown}\n                  number={row.bombCount}\n                  isbomb={row.val === 1 ? true : false}\n                  index1={index1}\n                  index2={index2}\n                  clicked={clicked}\n                  flagged={row.flagged}\n                  flag={flagGridPiece}\n                  touched={handleLongPress}\n                  touchCancelled={handleLongCancel}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n        <p>\n          Developed by Giulio Rossi. Check out more at{\" \"}\n          <a\n            href=\"https://ciuffi.dev\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            style={{ color: \"lightblue\" }}\n          >\n            Ciuffi.dev\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}